{"version":3,"sources":["components/Notification.js","services/blogs.js","services/login.js","reducers/userReducer.js","reducers/notificationReducer.js","components/LoginForm.js","components/Toggleable.js","reducers/blogReducer.js","components/BlogForm.js","components/LoggedIn.js","services/users.js","components/User.js","components/Users.js","services/comments.js","reducers/commentReducer.js","components/Blog.js","components/BlogList.js","components/Navbar.js","components/Blogs.js","reducers/usersReducer.js","components/Home.js","App.js","components/store.js","index.js"],"names":["Notification","notification","useSelector","state","className","baseUrl","token","create","newBlog","a","config","headers","Authorization","axios","post","response","data","addComment","blog","comment","id","getAll","get","then","addLike","likedBlog","put","deleteBlog","delete","setToken","newToken","login","credentials","userSlice","createSlice","name","initialState","reducers","setUser","action","payload","clearUser","loginUser","dispatch","loginService","user","actions","lastTimeout","notificationSlice","setSuccessNotification","clearTimeout","setErrorNotification","removeNotification","setNotification","type","setTimeout","setInternalNotification","LoginForm","useState","username","setUsername","password","setPassword","useDispatch","handleLogin","event","preventDefault","blogService","window","localStorage","setItem","JSON","stringify","console","log","onSubmit","value","onChange","target","Toggleable","forwardRef","props","ref","displayName","visible","setVisible","hideWhenVisible","display","showWhenVisible","toggleVisibility","useImperativeHandle","style","onClick","buttonLabel","children","blogSlice","addBlog","push","setBlogs","sort","blog1","blog2","likes","voteInternalBlog","blogToVote","map","deleteInternalBlog","deletedBlog","filter","createBlog","content","voteBlog","votedBlog","BlogForm","blogFormRef","createABlog","author","title","url","current","placeholder","LoggedIn","handleLogout","request","User","users","useParams","find","u","blogs","Users","to","length","commentSlice","setComments","createComment","newComment","Blog","full","comments","showPartial","paddingTop","paddingLeft","border","borderWidth","marginBottom","handleVoteBlog","handleDeleteBlog","confirm","createAComment","href","rel","BlogList","Table","striped","bordered","hover","Navbar","padding","Blogs","usersSlice","setUsers","Home","App","match","useMatch","params","useRef","useEffect","loggedUserJSON","getItem","tokenUser","parse","userService","commentService","removeItem","path","element","store","configureStore","reducer","blogReducer","notificationReducer","userReducer","usersReducer","commentReducer","ReactDOM","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.3e7b56ad.chunk.js","sourcesContent":["import { useSelector } from 'react-redux'\n\nconst Notification = () => {\n    const notification = useSelector((state) => state.notification)\n\n    if (notification[0] !== '' && notification[1] === false) {\n        return <div className=\"success\">{notification}</div>\n    }\n    if ( notification[0] !== '' && notification[1] === true) {\n        return <div className=\"error\">{notification}</div>\n    }\n    return null\n}\n\nexport default Notification\n","import axios from 'axios'\nconst baseUrl = '/api/blogs'\n\nlet token = null\n\nconst setToken = (newToken) => {\n    token = `bearer ${newToken}`\n}\n\nconst getAll = () => {\n    const request = axios.get(baseUrl)\n    return request.then((response) => response.data)\n}\n\nconst create = async (newBlog) => {\n    const config = {\n        headers: { Authorization: token },\n    }\n    const response = await axios.post(baseUrl, newBlog, config)\n    return response.data\n}\n\nconst addComment = async (blog, comment) => {\n    const response = await axios.post(`${baseUrl}/${blog.id}/comments`, comment)\n    return response.data\n}\n\nconst addLike = async (likedBlog) => {\n    const config = {\n        headers: { Authorization: token },\n    }\n    const response = await axios.put(\n        `${baseUrl}/${likedBlog.id}`,\n        likedBlog,\n        config\n    )\n    return response.data\n}\n\nconst deleteBlog = async (blog) => {\n    const config = {\n        headers: { Authorization: token },\n    }\n    const response = await axios.delete(`${baseUrl}/${blog.id}`, config)\n    return response.data\n}\n\nexport default { getAll, create, addLike, addComment, deleteBlog, setToken }\n","import axios from 'axios'\nconst baseUrl = '/api/login'\n\nconst login = async (credentials) => {\n    const response = await axios.post(baseUrl, credentials)\n    return response.data\n}\n\nexport default { login }\n","import { createSlice, createAsyncThunk } from '@reduxjs/toolkit'\r\nimport loginService from '../services/login'\r\n\r\nconst userSlice = createSlice({\r\n    name: 'user',\r\n    initialState: null,\r\n    reducers: {\r\n        setUser(state, action) {\r\n            return action.payload\r\n        },\r\n        clearUser(state, action) {\r\n            return null\r\n        },\r\n    },\r\n})\r\n\r\nexport const loginUser = (credentials) => {\r\n    return async ( dispatch ) => {\r\n        const user = await loginService.login(credentials)\r\n        dispatch(setUser(user))\r\n        return user\r\n    }\r\n}\r\n\r\nexport const { setUser, clearUser } = userSlice.actions\r\nexport default userSlice.reducer\r\n","import { createSlice } from '@reduxjs/toolkit'\r\n\r\nlet lastTimeout = null\r\n\r\nconst notificationSlice = createSlice({\r\n    name: 'notification',\r\n    initialState: '',\r\n    reducers: {\r\n        setSuccessNotification(state, action) {\r\n            clearTimeout(lastTimeout)\r\n            return [action.payload, false]\r\n        },\r\n        setErrorNotification(state, action) {\r\n            clearTimeout(lastTimeout)\r\n            return [action.payload, true]\r\n        },\r\n        removeNotification(state, action) {\r\n            return ['', false]\r\n        },\r\n    },\r\n})\r\n\r\nexport const setNotification = (notification, type) => {\r\n    switch (type) {\r\n    case true:\r\n        return (dispatch) => {\r\n            dispatch(setErrorNotification(notification))\r\n            lastTimeout = setTimeout(\r\n                () => dispatch(removeNotification('')),\r\n                5000\r\n            )\r\n        }\r\n    default:\r\n        return (dispatch) => {\r\n            dispatch(setSuccessNotification(notification))\r\n            lastTimeout = setTimeout(() => dispatch(removeNotification('')), 5000)\r\n        }\r\n    }\r\n}\r\n\r\nexport const {\r\n    setInternalNotification,\r\n    removeNotification,\r\n    setSuccessNotification,\r\n    setErrorNotification,\r\n} = notificationSlice.actions\r\nexport default notificationSlice.reducer\r\n","import React, { useState } from 'react'\nimport propTypes from 'prop-types'\nimport { useDispatch } from 'react-redux'\nimport blogService from '../services/blogs'\nimport { loginUser } from '../reducers/userReducer'\nimport { setNotification } from '../reducers/notificationReducer'\n\nconst LoginForm = () => {\n    const [username, setUsername] = useState('')\n    const [password, setPassword] = useState('')\n    const dispatch = useDispatch()\n\n    LoginForm.propTypes = {\n        username: propTypes.string.isRequired,\n        password: propTypes.string.isRequired,\n        setUsername: propTypes.func.isRequired,\n        setPassword: propTypes.func.isRequired,\n        handleLogin: propTypes.func.isRequired,\n    }\n\n    const handleLogin = async (event) => {\n        event.preventDefault()\n        try {\n            //const user = await loginService.login({ username, password })\n            //setUser(user)\n            const user = await dispatch(loginUser({ username, password }))\n            blogService.setToken(user.token)\n            window.localStorage.setItem('loggedBlogUser', JSON.stringify(user))\n            setUsername('')\n            setPassword('')\n            dispatch(setNotification('Logged in as ' + user.username, false))\n        } catch (exception) {\n            console.log(exception)\n            dispatch(setNotification('Incorrect username or password', true))\n        }\n    }\n\n    return (\n        <div>\n            <h2>Login</h2>\n            <form onSubmit={handleLogin}>\n                <div>\n                    username\n                    <input\n                        type=\"text\"\n                        value={username}\n                        name=\"Username\"\n                        id=\"username\"\n                        onChange={({ target }) => setUsername(target.value)}\n                    />\n                </div>\n                <div>\n                    password\n                    <input\n                        type=\"password\"\n                        value={password}\n                        name=\"Password\"\n                        id=\"password\"\n                        onChange={({ target }) => setPassword(target.value)}\n                    />\n                </div>\n                <div>\n                    <button type=\"submit\" className=\"btn btn-primary\" id=\"login-button\">\n                        login\n                    </button>\n                </div>\n            </form>\n        </div>\n    )\n}\n\nexport default LoginForm\n","import { useState, useImperativeHandle, forwardRef } from 'react'\nimport propTypes from 'prop-types'\n\nconst Toggleable = forwardRef((props, ref) => {\n    Toggleable.displayName = Toggleable\n    const [visible, setVisible] = useState(false)\n\n    const hideWhenVisible = { display: visible ? 'none' : '' }\n    const showWhenVisible = { display: visible ? '' : 'none' }\n\n    Toggleable.propTypes = {\n        buttonLabel: propTypes.string.isRequired,\n    }\n\n    const toggleVisibility = () => setVisible(!visible)\n\n    useImperativeHandle(ref, () => {\n        return {\n            toggleVisibility,\n        }\n    })\n\n    return (\n        <div>\n            <div style={hideWhenVisible}>\n                <button onClick={toggleVisibility} className=\"btn btn-primary\">\n                    {props.buttonLabel}{' '}\n                </button>\n            </div>\n            <div style={showWhenVisible}>\n                {props.children}\n                <button onClick={toggleVisibility} className=\"btn btn-secondary\">cancel</button>\n            </div>\n        </div>\n    )\n})\n\nexport default Toggleable\n","import { createSlice } from '@reduxjs/toolkit'\r\nimport blogService from '../services/blogs'\r\nimport { setNotification } from './notificationReducer'\r\n\r\nconst blogSlice = createSlice({\r\n    name: 'blogs',\r\n    initialState: [],\r\n    reducers: {\r\n        addBlog(state, action) {\r\n            const blog = action.payload\r\n            state.push(blog)\r\n        },\r\n        setBlogs(state, action) {\r\n            return action.payload.sort((blog1, blog2) => blog2.likes - blog1.likes)\r\n        },\r\n        voteInternalBlog(state, action) {\r\n            const blogToVote = action.payload\r\n            return state\r\n                .map((blog) => (blog.id !== blogToVote.id ? blog : blogToVote))\r\n                .sort((blog1, blog2) => blog2.likes - blog1.likes)\r\n        },\r\n        deleteInternalBlog(state, action) {\r\n            const deletedBlog = action.payload\r\n            console.log(deletedBlog)\r\n            return state.filter((blog) => blog.id !== deletedBlog.id)\r\n        },\r\n    },\r\n})\r\n\r\nexport const createBlog = (content) => {\r\n    return async (dispatch) => {\r\n        const newBlog = await blogService.create(content)\r\n        dispatch(addBlog(newBlog))\r\n    }\r\n}\r\n\r\nexport const initializeBlogs = () => {\r\n    return async (dispatch) => {\r\n        const blogs = await blogService.getAll()\r\n        dispatch(setBlogs(blogs))\r\n    }\r\n}\r\n\r\nexport const voteBlog = (blog, user) => {\r\n    return async (dispatch) => {\r\n        const votedBlog = await blogService.addLike(blog)\r\n        dispatch(voteInternalBlog({ ...votedBlog, user: user }))\r\n    }\r\n}\r\n\r\nexport const deleteBlog = (blog) => {\r\n    return async (dispatch) => {\r\n        const deletedBlog = await blogService.deleteBlog(blog)\r\n        dispatch(deleteInternalBlog(blog))\r\n    }\r\n}\r\n\r\nexport const { addBlog, setBlogs, voteInternalBlog, deleteInternalBlog } =\r\n    blogSlice.actions\r\nexport default blogSlice.reducer\r\n","import React from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { createBlog } from '../reducers/blogReducer'\nimport { setNotification } from '../reducers/notificationReducer'\n\nconst BlogForm = ({ blogFormRef }) => {\n    const dispatch = useDispatch()\n    const user = useSelector((state) => state.user)\n\n    const createABlog = async (event) => {\n        event.preventDefault()\n        try {\n            await dispatch(\n                createBlog({\n                    author: event.target.author.value,\n                    title: event.target.title.value,\n                    url: event.target.url.value,\n                    likes: 0,\n                    user: user,\n                })\n            )\n            dispatch(\n                setNotification(\n                    'Added a new blog: ' +\n                        event.target.title.value +\n                        ' by ' +\n                        event.target.author.value,\n                    false\n                )\n            )\n            blogFormRef.current.toggleVisibility()\n            event.target.author.value = ''\n            event.target.title.value = ''\n            event.target.url.value = ''\n        } catch (exception) {\n            console.log(exception)\n            dispatch(\n                setNotification('Blog couldn´t be added: ' + exception, true)\n            )\n        }\n    }\n\n    return (\n        <div>\n            <h2>add new blog</h2>\n            <form onSubmit={createABlog}>\n                <div>\n                    author:{' '}\n                    <input\n                        name=\"author\"\n                        id=\"authorField\"\n                        placeholder=\"Author name\"\n                    />\n                </div>\n                <div>\n                    title:{' '}\n                    <input\n                        name=\"title\"\n                        id=\"titleField\"\n                        placeholder=\"Title name\"\n                    />\n                </div>\n                <div>\n                    url:{' '}\n                    <input\n                        name=\"url\"\n                        id=\"urlField\"\n                        placeholder=\"url for blog\"\n                    />\n                </div>\n                <div>\n                    <button type=\"submit\" id=\"addBlogButton\" className=\"btn btn-primary\">\n                        Add blog\n                    </button>\n                </div>\n            </form>\n        </div>\n    )\n}\n\nexport default BlogForm\n","import { useSelector } from 'react-redux'\n\nconst LoggedIn = ({ handleLogout }) => {\n    const user = useSelector((state) => state.user)\n    return (\n        <div className=\"inline\">\n            <p className=\"inline\">{user.name} logged in </p>\n            <button onClick={() => handleLogout()} className=\"btn btn-primary\">\n                Log out{' '}\n            </button>\n        </div>\n    )\n}\n\nexport default LoggedIn\n","import axios from 'axios'\r\nconst baseUrl = '/api/users'\r\n\r\nconst getAll = async () => {\r\n    const request = await axios.get(baseUrl)\r\n    return request.data\r\n}\r\n\r\nexport default { getAll }\r\n","import { useSelector } from 'react-redux'\r\nimport { useParams } from 'react-router-dom'\r\n\r\nconst User = () => {\r\n    const users = useSelector((state) => state.users)\r\n    const id = useParams().id\r\n    const user = users.find((u) => u.id === id)\r\n    if (!user) {\r\n        return null\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h3>{user.name}</h3>\r\n            <h4>added blogs</h4>\r\n            <ul>\r\n                {user.blogs.map((blog) => (\r\n                    <li key={blog.id}>{blog.title}</li>\r\n                ))}\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default User\r\n","import React, { useEffect, useState } from 'react'\r\nimport userService from '../services/users'\r\nimport User from './User'\r\nimport { useSelector } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst Users = () => {\r\n    const users = useSelector((state) => state.users)\r\n    return (\r\n        <div>\r\n            <tbody>\r\n                <h2>Users</h2>\r\n                <tr>\r\n                    <td>name</td>\r\n                    <td>blogs created</td>\r\n                </tr>\r\n                {users.map((user) => (\r\n                    <tr key={user.id}>\r\n                        <Link to={`/users/${user.id}`}>{user.name}</Link>\r\n                        <td>{user.blogs.length}</td>\r\n                    </tr>\r\n                ))}\r\n            </tbody>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Users\r\n","import axios from 'axios'\r\nconst baseUrl = '/api/comments'\r\n\r\nconst getAll = () => {\r\n    const request = axios.get(baseUrl)\r\n    return request.then((response) => response.data)\r\n}\r\nexport default { getAll }\r\n","import { createSlice } from '@reduxjs/toolkit'\r\nimport comments from '../services/comments'\r\nimport commentService from '../services/comments'\r\nimport blogService from '../services/blogs'\r\n\r\nconst commentSlice = createSlice({\r\n    name: 'comments',\r\n    initialState: [],\r\n    reducers: {\r\n        setComments(state, action) {\r\n            return action.payload\r\n        },\r\n        addComment(state, action) {\r\n            const comment = {\r\n                blog: action.payload.blog.id,\r\n                content: action.payload.content,\r\n            }\r\n            state.push(comment)\r\n        },\r\n    },\r\n})\r\n\r\nexport const initializeComments = () => {\r\n    return async (dispatch) => {\r\n        const comments = await commentService.getAll()\r\n        dispatch(setComments(comments))\r\n    }\r\n}\r\n\r\nexport const createComment = (blog, newComment) => {\r\n    return async (dispatch) => {\r\n        //console.log(blog + '  ' + newComment)\r\n        const comment = await blogService.addComment(blog, {\r\n            content: newComment,\r\n        })\r\n        dispatch(addComment(comment))\r\n    }\r\n}\r\n\r\nexport const { setComments, addComment } = commentSlice.actions\r\nexport default commentSlice.reducer\r\n","import React, { useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useParams } from 'react-router-dom'\nimport { voteBlog, deleteBlog } from '../reducers/blogReducer'\nimport { setNotification } from '../reducers/notificationReducer'\nimport { createComment } from '../reducers/commentReducer'\nimport { Link } from 'react-router-dom'\nimport commentService from '../services/comments'\n\nconst Blog = ({ blog, full }) => {\n    const [visible, setVisible] = useState(false)\n\n    const dispatch = useDispatch()\n    const user = useSelector((state) => state.user)\n    const comments = useSelector((state) => state.comments)\n\n    const showPartial = {\n        display: visible ? 'none' : '',\n        paddingTop: 10,\n        paddingLeft: 2,\n        border: 'solid',\n        borderWidth: 1,\n        marginBottom: 5,\n    }\n    const showFull = {\n        display: visible ? '' : 'none',\n        paddingTop: 10,\n        paddingLeft: 2,\n        border: 'solid',\n        borderWidth: 1,\n        marginBottom: 5,\n    }\n\n    const handleVoteBlog = async () => {\n        event.preventDefault()\n        try {\n            await dispatch(voteBlog(blog, blog.user))\n            dispatch(\n                setNotification('Voted ' + blog.title + ' by ' + blog.author)\n            )\n        } catch (exception) {\n            dispatch(\n                setNotification('Like couldn`t be added: ' + exception, true)\n            )\n        }\n    }\n\n    const handleDeleteBlog = async () => {\n        event.preventDefault()\n        try {\n            if (window.confirm('Do you really want to delete the blog?')) {\n                await dispatch(deleteBlog(blog))\n                dispatch(\n                    setNotification(\n                        'Blog ' +\n                            blog.title +\n                            ' by ' +\n                            blog.author +\n                            ' has been deleted'\n                    )\n                )\n            }\n        } catch (exception) {\n            dispatch(\n                setNotification('blog couldn`t be deleted: ' + exception, true)\n            )\n        }\n    }\n    const createAComment = async (event) => {\n        event.preventDefault()\n        console.log(blog)\n        try {\n            await dispatch(createComment(blog, event.target.comment.value))\n            dispatch(\n                setNotification(\n                    'Added a new comment: ' + event.target.comment.value,\n                    false\n                )\n            )\n        } catch (exception) {\n            console.log(exception)\n            dispatch(\n                setNotification('Comment couldn´t be added: ' + exception, true)\n            )\n        }\n    }\n    if (!blog) {\n        return null\n    }\n\n    if (full) {\n        console.log(blog)\n        return (\n            <div className=\"blog\">\n                <div className=\"fullContent\">\n                    <h2>{blog.title} </h2>\n                    <a href={blog.url} target={'_blank'} rel=\"noreferrer\">\n                        {blog.url}{' '}\n                    </a>\n                    <div>\n                        <p>likes {blog.likes}</p>\n                        <button onClick={() => dispatch(handleVoteBlog)} className=\"btn btn-success\">\n                            Like\n                        </button>\n                    </div>\n                    <div>{blog.user.name}</div>\n                    {user.username === blog.user.username && (\n                        <div>\n                            <button\n                                onClick={() => handleDeleteBlog()}\n                                className=\"btn btn-danger\"\n                            >\n                                Remove\n                            </button>\n                        </div>\n                    )}\n                    <h3>comments</h3>\n                    <form onSubmit={createAComment}>\n                        <div>\n                            <input\n                                name={'comment'}\n                                id={'commentField'}\n                                placeholder={'Comment'}\n                            />\n                        </div>\n                        <div>\n                            <button\n                                type=\"submit\"\n                                id=\"addCommentButton\"\n                                className=\"btn btn-primary\"\n                            >\n                                Add comment\n                            </button>\n                        </div>\n                    </form>\n                    <ul>\n                        {comments.map((comment) =>\n                            comment.blog === blog.id ? (\n                                <li>{comment.content}</li>\n                            ) : null\n                        )}\n                    </ul>\n                </div>\n            </div>\n        )\n    }\n\n    return (\n        <tr>\n            <div className=\"blog\">\n                <div style={showPartial} className=\"partialContent\">\n                    <Link to={`/blogs/${blog.id}`}>\n                        {blog.title} {blog.author}\n                    </Link>\n                </div>\n            </div>\n        </tr>\n    )\n\n    /*return (\n        <div className=\"blog\">\n            <div style={showPartial} className=\"partialContent\">\n                {blog.title} {blog.author}\n                <button onClick={() => setVisible(!visible)}>show</button>\n            </div>\n            <div style={showFull} className=\"fullContent\">\n                <div>\n                    {blog.title}{' '}\n                    <button onClick={() => setVisible(!visible)}>Hide</button>\n                </div>\n                <div>{blog.author} </div>\n                <div>{blog.url} </div>\n                <div>\n                    likes {blog.likes}\n                    <button onClick={() => dispatch(handleVoteBlog)}>\n                        Like\n                    </button>\n                </div>\n                <div>{blog.user.name}</div>\n                {user.user.username === blog.user.username && (\n                    <div>\n                        <button onClick={() => handleDeleteBlog()}>Remove</button>\n                    </div>\n                )}\n            </div>\n        </div>\n    )*/\n}\nexport default Blog\n","import { useSelector, useDispatch } from 'react-redux'\r\nimport { Table } from 'react-bootstrap'\r\nimport Blog from './Blog'\r\nimport { voteBlog } from '../reducers/blogReducer'\r\n\r\nconst BlogList = (user) => {\r\n    const blogs = useSelector((state) => state.blogs)\r\n    console.log(blogs)\r\n\r\n    return (\r\n        <div>\r\n            <Table striped bordered hover>\r\n                <tbody>\r\n                    {blogs.map((blog) => (\r\n                        <Blog\r\n                            key={blog.id}\r\n                            blog={blog}\r\n                            user={user} //fix later\r\n                        />\r\n                    ))}\r\n                </tbody>\r\n            </Table>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default BlogList\r\n","import { useSelector } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\nimport LoggedIn from './LoggedIn'\r\n\r\nconst Navbar = ({ handleLogout }) => {\r\n    const padding = {\r\n        padding: 5,\r\n    }\r\n\r\n    const inline = {\r\n        display: 'inline',\r\n    }\r\n\r\n    const user = useSelector((state) => state.user)\r\n\r\n    return (\r\n        <div className=\"navBar\">\r\n            <Link style={padding} to=\"/\">\r\n                home\r\n            </Link>\r\n            <Link style={padding} to=\"/users\">\r\n                users\r\n            </Link>\r\n            <Link style={padding} to=\"/blogs\">\r\n                blogs\r\n            </Link>\r\n\r\n            {!user ? null : (\r\n                <LoggedIn style={inline} handleLogout={handleLogout} />\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Navbar\r\n","import { useSelector } from 'react-redux'\r\nimport Toggleable from './Toggleable'\r\nimport BlogForm from './BlogForm'\r\nimport BlogList from './BlogList'\r\n\r\nconst Blogs = ({ blogFormRef }) => {\r\n    const user = useSelector((state) => state.user)\r\n\r\n    if (user !== null) {\r\n        return (\r\n            <div>\r\n                <Toggleable buttonLabel={'Add a new blog'} ref={blogFormRef}>\r\n                    <BlogForm user={user} blogFormRef={blogFormRef} />\r\n                </Toggleable>\r\n                <h2>blogs</h2>\r\n                <BlogList user={user} />\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return null\r\n}\r\n\r\nexport default Blogs\r\n","import userService from '../services/users'\r\nimport { createSlice } from '@reduxjs/toolkit'\r\n\r\nconst usersSlice = createSlice({\r\n    name: 'users',\r\n    initialState: [],\r\n    reducers: {\r\n        setUsers(state, action) {\r\n            return action.payload\r\n        },\r\n    },\r\n})\r\n\r\nexport const initializeUsers = () => {\r\n    return async (dispatch) => {\r\n        const users = await userService.getAll()\r\n        dispatch(setUsers(users))\r\n    }\r\n}\r\n\r\nexport const { setUsers } = usersSlice.actions\r\nexport default usersSlice.reducer\r\n","import { useSelector } from 'react-redux'\r\nimport Toggleable from './Toggleable'\r\nimport BlogForm from './BlogForm'\r\nimport BlogList from './BlogList'\r\n\r\nconst Home = ({ blogFormRef }) => {\r\n    const user = useSelector((state) => state.user)\r\n\r\n    if (user !== null) {\r\n        return (\r\n            <div>\r\n                <Toggleable buttonLabel={'Add a new blog'} ref={blogFormRef}>\r\n                    <BlogForm user={user} blogFormRef={blogFormRef} />\r\n                </Toggleable>\r\n                <h2>blogs</h2>\r\n                <BlogList user={user} />\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return null\r\n}\r\n\r\nexport default Home\r\n","import React, { useState, useEffect, useRef } from 'react'\nimport Notification from './components/Notification'\nimport LoginForm from './components/LoginForm'\nimport Toggleable from './components/Toggleable'\nimport BlogForm from './components/BlogForm'\nimport LoggedIn from './components/LoggedIn'\nimport Users from './components/Users'\nimport blogService from './services/blogs'\nimport loginService from './services/login'\nimport BlogList from './components/BlogList'\nimport Navbar from './components/Navbar'\nimport Blog from './components/Blog'\nimport Blogs from './components/Blogs'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { initializeBlogs } from './reducers/blogReducer'\nimport { initializeUsers } from './reducers/usersReducer'\nimport { setNotification } from './reducers/notificationReducer'\nimport { loginUser, clearUser, setUser } from './reducers/userReducer'\nimport User from './components/User'\nimport {\n    BrowserRouter as Router,\n    Routes,\n    Route,\n    Link,\n    useMatch,\n} from 'react-router-dom'\nimport Home from './components/Home'\nimport { initializeComments } from './reducers/commentReducer'\n\nconst App = () => {\n    const user = useSelector((state) => state.user)\n    const users = useSelector((state) => state.users)\n    const blogs = useSelector((state) => state.blogs)\n    const comments = useSelector((state) => state.comments)\n    const match = useMatch('/blogs/:id')\n\n    const blog = match\n        ? blogs.find((blog) => blog.id === match.params.id)\n        : null\n\n    const blogFormRef = useRef()\n\n    const dispatch = useDispatch()\n\n    /*const handleLogin = async (event) => {\n        event.preventDefault()\n        try {\n            //const user = await loginService.login({ username, password })\n            //setUser(user)\n            const user = await dispatch(loginUser({ username, password }))\n            blogService.setToken(user.token)\n            window.localStorage.setItem('loggedBlogUser', JSON.stringify(user))\n            setUsername('')\n            setPassword('')\n            dispatch(setNotification('Logged in as ' + user.username, false))\n        } catch (exception) {\n            console.log(exception)\n            dispatch(setNotification('Incorrect username or password', true))\n        }\n    }*/\n\n    const handleLogout = () => {\n        window.localStorage.removeItem('loggedBlogUser')\n        //setUser(null)\n        dispatch(clearUser())\n        dispatch(setNotification('Succesfully logged out', false))\n    }\n\n    useEffect(() => {\n        const loggedUserJSON = window.localStorage.getItem('loggedBlogUser')\n        if (loggedUserJSON) {\n            const tokenUser = JSON.parse(loggedUserJSON)\n            dispatch(setUser(tokenUser))\n            //setUser(user)\n            blogService.setToken(tokenUser.token)\n        }\n    }, [])\n\n    useEffect(() => {\n        dispatch(initializeBlogs())\n    }, [dispatch])\n\n    useEffect(() => {\n        dispatch(initializeUsers())\n    }, [dispatch])\n\n    useEffect(() => {\n        dispatch(initializeComments())\n    }, [dispatch])\n\n    return (\n        <div>\n            <Navbar handleLogout={handleLogout} />\n\n            <div className=\"container\">\n                <h1>Blogs</h1>\n\n                <Notification />\n                {user === null ? <LoginForm /> : null}\n                <Routes>\n                    <Route\n                        path=\"/\"\n                        element={<Home blogFormRef={blogFormRef} />}\n                    />\n                    <Route\n                        path=\"/blogs/:id\"\n                        element={<Blog full={true} blog={blog} />}\n                    />\n                    <Route path=\"/users/:id\" element={<User users={users} />} />\n                    <Route path=\"/users\" element={<Users />} />\n                    <Route\n                        path=\"/blogs\"\n                        element={<Blogs blogFormRef={blogFormRef} />}\n                    />\n                </Routes>\n            </div>\n        </div>\n    )\n}\n\nexport default App\n","import { configureStore } from '@reduxjs/toolkit'\r\nimport blogReducer from '../reducers/blogReducer'\r\nimport commentReducer from '../reducers/commentReducer'\r\nimport notificationReducer from '../reducers/notificationReducer'\r\nimport userReducer from '../reducers/userReducer'\r\nimport usersReducer from '../reducers/usersReducer'\r\n\r\nconst store = configureStore({\r\n    reducer: {\r\n        blogs: blogReducer,\r\n        notification: notificationReducer,\r\n        user: userReducer,\r\n        users: usersReducer,\r\n        comments: commentReducer,\r\n    },\r\n})\r\n\r\nexport default store\r\n","import React from 'react'\nimport ReactDOM from 'react-dom/client'\nimport App from './App'\nimport './index.css'\nimport store from './components/store'\nimport { Provider } from 'react-redux'\nimport { BrowserRouter as Router } from 'react-router-dom'\n\nReactDOM.createRoot(document.getElementById('root')).render(\n    <Provider store={store}>\n        <Router>\n            <App />\n        </Router>\n    </Provider>\n)\n"],"sourceRoot":""}